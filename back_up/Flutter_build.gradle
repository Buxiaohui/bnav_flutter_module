// Generated file. Do not edit.

import java.nio.file.Paths

def localProperties = new Properties()
def localPropertiesFile = new File(buildscript.sourceFile.parentFile.parentFile, 'local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

apply plugin: 'com.android.library'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"
apply plugin: 'com.kezong.fat-aar'

group 'bnav_flutter_module'
version '1.0'

android {
    compileSdkVersion 28

    defaultConfig {
        minSdkVersion 16
        targetSdkVersion 28
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
}

flutter {
    source '../..'
}


private Boolean useLocalEngine() {
    return project.hasProperty('local-engine-repo')
}

/** 是否将远程依赖也打包进去 **/
configurations.embed.transitive = false
def flutterProjectRoot = rootProject.projectDir.parentFile.toPath()
def plugins = new Properties()
def pluginsFile = new File(flutterProjectRoot.toFile(), '.flutter-plugins')
if (pluginsFile.exists()) {
    pluginsFile.withReader('UTF-8') { reader -> plugins.load(reader) }
}

dependencies {
    testImplementation 'junit:junit:4.12'
    /** start **/
    File flutterRootF = project.file(flutterRoot)
    println "flutterRootF:" + flutterRootF
    println "flutterRootF.absolutePath:" + flutterRootF.absolutePath
    def version = "1.0.0" // Match any version since there's only one.
    String engineVersionF = useLocalEngine()
            ? "+"
            :  Paths.get(flutterRootF.absolutePath, "bin", "internal", "engine.version").toFile().text.trim()
    embed "io.flutter:flutter_embedding_release:${version}-$engineVersionF"
    embed "io.flutter:arm64_v8a_release:${version}-$engineVersionF"
    embed "io.flutter:armeabi_v7a_release:${version}-$engineVersionF"

    plugins.each { name, _ ->
        println "plugin_name:" + name
        if(name.endsWith("_linux") ||name.endsWith("_windows") ||name.endsWith("_web") ||name.endsWith("_macos") ){

        }else{
            embed project(path: ":$name", configuration: 'default')
        }
    }
    /** end **/
}
